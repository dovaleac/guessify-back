/*
 * This file is generated by jOOQ.
 */
package com.dovaleac.guessing.game.jooq.generated.independent.tables;


import com.dovaleac.guessing.game.jooq.generated.independent.Independent;
import com.dovaleac.guessing.game.jooq.generated.independent.Indexes;
import com.dovaleac.guessing.game.jooq.generated.independent.Keys;
import com.dovaleac.guessing.game.jooq.generated.independent.tables.records.QuestionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Question extends TableImpl<QuestionRecord> {

    private static final long serialVersionUID = -954569579;

    /**
     * The reference instance of <code>independent.question</code>
     */
    public static final Question QUESTION = new Question();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<QuestionRecord> getRecordType() {
        return QuestionRecord.class;
    }

    /**
     * The column <code>independent.question.id</code>.
     */
    public final TableField<QuestionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('independent.question_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>independent.question.question_set_id</code>.
     */
    public final TableField<QuestionRecord, Integer> QUESTION_SET_ID = createField("question_set_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>independent.question.clues</code>.
     */
    public final TableField<QuestionRecord, String[]> CLUES = createField("clues", org.jooq.impl.SQLDataType.VARCHAR.getArrayDataType(), this, "");

    /**
     * The column <code>independent.question.answer</code>.
     */
    public final TableField<QuestionRecord, String> ANSWER = createField("answer", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>independent.question.difficulty</code>.
     */
    public final TableField<QuestionRecord, Integer> DIFFICULTY = createField("difficulty", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("3", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>independent.question.fun_facts</code>.
     */
    public final TableField<QuestionRecord, String> FUN_FACTS = createField("fun_facts", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>independent.question</code> table reference
     */
    public Question() {
        this(DSL.name("question"), null);
    }

    /**
     * Create an aliased <code>independent.question</code> table reference
     */
    public Question(String alias) {
        this(DSL.name(alias), QUESTION);
    }

    /**
     * Create an aliased <code>independent.question</code> table reference
     */
    public Question(Name alias) {
        this(alias, QUESTION);
    }

    private Question(Name alias, Table<QuestionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Question(Name alias, Table<QuestionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Question(Table<O> child, ForeignKey<O, QuestionRecord> key) {
        super(child, key, QUESTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Independent.INDEPENDENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.QUESTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<QuestionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_QUESTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<QuestionRecord> getPrimaryKey() {
        return Keys.QUESTION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<QuestionRecord>> getKeys() {
        return Arrays.<UniqueKey<QuestionRecord>>asList(Keys.QUESTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<QuestionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<QuestionRecord, ?>>asList(Keys.QUESTION__QUESTION_QUESTION_SET_ID_FKEY);
    }

    public QuestionSet questionSet() {
        return new QuestionSet(this, Keys.QUESTION__QUESTION_QUESTION_SET_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Question as(String alias) {
        return new Question(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Question as(Name alias) {
        return new Question(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Question rename(String name) {
        return new Question(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Question rename(Name name) {
        return new Question(name, null);
    }
}
