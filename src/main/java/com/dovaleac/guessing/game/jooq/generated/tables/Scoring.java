/*
 * This file is generated by jOOQ.
 */
package com.dovaleac.guessing.game.jooq.generated.tables;


import com.dovaleac.guessing.game.jooq.generated.Games;
import com.dovaleac.guessing.game.jooq.generated.Indexes;
import com.dovaleac.guessing.game.jooq.generated.Keys;
import com.dovaleac.guessing.game.jooq.generated.tables.records.ScoringRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scoring extends TableImpl<ScoringRecord> {

    private static final long serialVersionUID = 1574806385;

    /**
     * The reference instance of <code>games.scoring</code>
     */
    public static final Scoring SCORING = new Scoring();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScoringRecord> getRecordType() {
        return ScoringRecord.class;
    }

    /**
     * The column <code>games.scoring.id</code>.
     */
    public final TableField<ScoringRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('games.scoring_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>games.scoring.scorings</code>.
     */
    public final TableField<ScoringRecord, String> SCORINGS = createField("scorings", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>games.scoring.malus_if_missed</code>.
     */
    public final TableField<ScoringRecord, Integer> MALUS_IF_MISSED = createField("malus_if_missed", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>games.scoring</code> table reference
     */
    public Scoring() {
        this(DSL.name("scoring"), null);
    }

    /**
     * Create an aliased <code>games.scoring</code> table reference
     */
    public Scoring(String alias) {
        this(DSL.name(alias), SCORING);
    }

    /**
     * Create an aliased <code>games.scoring</code> table reference
     */
    public Scoring(Name alias) {
        this(alias, SCORING);
    }

    private Scoring(Name alias, Table<ScoringRecord> aliased) {
        this(alias, aliased, null);
    }

    private Scoring(Name alias, Table<ScoringRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Scoring(Table<O> child, ForeignKey<O, ScoringRecord> key) {
        super(child, key, SCORING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Games.GAMES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCORING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ScoringRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SCORING;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ScoringRecord> getPrimaryKey() {
        return Keys.SCORING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ScoringRecord>> getKeys() {
        return Arrays.<UniqueKey<ScoringRecord>>asList(Keys.SCORING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Scoring as(String alias) {
        return new Scoring(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Scoring as(Name alias) {
        return new Scoring(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scoring rename(String name) {
        return new Scoring(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scoring rename(Name name) {
        return new Scoring(name, null);
    }
}
