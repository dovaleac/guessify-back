/*
 * This file is generated by jOOQ.
 */
package com.dovaleac.guessing.game.jooq.generated.tables;


import com.dovaleac.guessing.game.jooq.generated.Games;
import com.dovaleac.guessing.game.jooq.generated.Indexes;
import com.dovaleac.guessing.game.jooq.generated.Keys;
import com.dovaleac.guessing.game.jooq.generated.tables.records.GameRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Game extends TableImpl<GameRecord> {

    private static final long serialVersionUID = 156697414;

    /**
     * The reference instance of <code>games.game</code>
     */
    public static final Game GAME = new Game();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GameRecord> getRecordType() {
        return GameRecord.class;
    }

    /**
     * The column <code>games.game.id</code>.
     */
    public final TableField<GameRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('games.game_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>games.game.room_id</code>.
     */
    public final TableField<GameRecord, Integer> ROOM_ID = createField("room_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>games.game.game_config_id</code>.
     */
    public final TableField<GameRecord, Integer> GAME_CONFIG_ID = createField("game_config_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>games.game.status</code>.
     */
    public final TableField<GameRecord, String> STATUS = createField("status", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>games.game.question_set_id</code>.
     */
    public final TableField<GameRecord, Integer> QUESTION_SET_ID = createField("question_set_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>games.game.master_player_id</code>.
     */
    public final TableField<GameRecord, Integer> MASTER_PLAYER_ID = createField("master_player_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>games.game</code> table reference
     */
    public Game() {
        this(DSL.name("game"), null);
    }

    /**
     * Create an aliased <code>games.game</code> table reference
     */
    public Game(String alias) {
        this(DSL.name(alias), GAME);
    }

    /**
     * Create an aliased <code>games.game</code> table reference
     */
    public Game(Name alias) {
        this(alias, GAME);
    }

    private Game(Name alias, Table<GameRecord> aliased) {
        this(alias, aliased, null);
    }

    private Game(Name alias, Table<GameRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Game(Table<O> child, ForeignKey<O, GameRecord> key) {
        super(child, key, GAME);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Games.GAMES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GAME_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<GameRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GameRecord> getPrimaryKey() {
        return Keys.GAME_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GameRecord>> getKeys() {
        return Arrays.<UniqueKey<GameRecord>>asList(Keys.GAME_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<GameRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<GameRecord, ?>>asList(Keys.GAME__GAME_ROOM_ID_FKEY, Keys.GAME__GAME_GAME_CONFIG_ID_FKEY, Keys.GAME__GAME_QUESTION_SET_ID_FKEY, Keys.GAME__GAME_MASTER_PLAYER_ID_FKEY);
    }

    public Room room() {
        return new Room(this, Keys.GAME__GAME_ROOM_ID_FKEY);
    }

    public GameConfig gameConfig() {
        return new GameConfig(this, Keys.GAME__GAME_GAME_CONFIG_ID_FKEY);
    }

    public QuestionSet questionSet() {
        return new QuestionSet(this, Keys.GAME__GAME_QUESTION_SET_ID_FKEY);
    }

    public Player player() {
        return new Player(this, Keys.GAME__GAME_MASTER_PLAYER_ID_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Game as(String alias) {
        return new Game(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Game as(Name alias) {
        return new Game(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(String name) {
        return new Game(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Game rename(Name name) {
        return new Game(name, null);
    }
}
